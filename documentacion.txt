//Diagramas de clases, entidad/relacion, casos de uso...

//Imprimir un pdf desde la propia web
Realizando una busqueda en github se encontró una libreria, html2pdf (https://github.com/spipu/html2pdf/), que provee de funciones para poder llevar a cabo la conversion de textos en lenguaje html a pdf.
Para poder instalar la libreria se empleo una aplicacion llamada composer. Una vez instalado composer solo hay que teclear en la carpeta raiz del proyecto: 
composer require spipu/html2pdf y la libreria ya puede ser utilizada (si este proyecto fuera desplegado para produccion habria que modificar la instalacion de composer).

Se imprime una lista de los t’tulos de las comunicaciones y a la vez que se imprime cada una se le asocia un bot—n que por medio de un href y mŽtodo GET se pasa a otra p‡gina d—nde ser‡ impreso.

// acabar pie


//diseño de la pagina web (Wireframe)

En la página principal se ha añadido un slideshow (conjunto de imagenes que se van mostrando una a una mediante el empleo de botones. La implementación es muy sencilla si se usan frameworks como Bootstrap pero en este caso como se persigue aprender lo máximo posible se ha empleado solo html, css y javascript.
Se ha comenzado con la parte de html añadiendo contenedores para las imagenes, botones, texto etc. Después se ha dado estilo en un archivo externo css donde nos aseguramos de que las imágenes no sean visible (display:none) mediante código javascript permitimos a los botones que la imágen seleccionada se vuelva visible (display:block). Un error bastante común es que si el archivo javascript se invoca demasiado pronto en el documento html es posible que los elementos a los que ataca no esten aun generados por lo que se optó por declarar el archivo externo de javascript en la zona mas baja del documento html.

Se ha empleado el metodo include de php para poder separar las distintas secciones de la pagina web.

Responsive mobile first

Se ha añadido un comportamiento responsive simple mediante el uso de media queries bajo la premisa "mobile first" es decir diseñar las páginas pensando en dispositivos con pantallas pequeñas:
Si la pantalla tiene una longitud menor de 757 pixeles el menu de navegación se transformará para ser mas sencillo de utilizar a la vez el texto se dispondrá en una única columna frente a las 3 para pantallas mas grandes


Pagina de conferencias, se ha añadido un calendario y una serie de actividades que se generan de manera dinamica mediante un array asociativo que contiene toda la información al respecto.  El calendario tambien se ha generado de manera dinamica empleando bucles for. Además se han señalado los dias con actividades mediante el empleo de la funcion key_array_exists par saber si en un día determinado existían una actividad.


//gestion errores
En la base de datos 

//Acceso a base de datos

Datos en utf8

Externalizacion de las consultas, updates, conexiones etc.

//Control de versiones

Se ha creado un repositorio local mediante el empleo de GIT ya que a mi juicio es muy potente y fácil de usar. Además existe abundante documentación y tutoriales sobre su uso.
De igual manera se creó otro repositorio remoto en la web github. Esto ha resultado especialmente conveniente ya que ha permitido trabajar desde varios ordenadores.

//Nuevo usuario

Se ha añadido la opción de crear un nuevo usuario mediante el empleo de una función buscar que recibe como parámetros la conexión a la base de datos y el nombre de usuario, si este nombre de usuario ya se encuentra registrado devuelve el valor false con lo que se inhibe la creación de un nuevo usuario. Si el nombre de usuario no existe se invoca a una función que insertará los datos del nuevo usuario. Estos datos se obtienen mediante un formulario en el que se emplearon inputs adecuados a cada tipo de información (texto, email, password etc.).
La validación de los datos se ha llevado a cabo mediante Javascript y expresiones regulares, en el lado del cliente. El esquema que se ha seguido es el siguiente:

<script>
	function validacion(){
		var palabra = document.forms["formulario"]["campo"].value;
		if (palabra == ""){
			return false;
		}
</script>

<form name="formulario" action="" onsubmit="return validacion" method="post">...</form>


////////log out
Se realizará en dos pasos primero se borran todas las variables de la sesión:
session_unset();
Después se destruye la sesión:
session_destroy();

//subir una comunicacion 

////////login usuario/////////

Primero empezaremos con un formulario típico, usaremos los atributos required..

<form action="" method="post">
    
	<input type="text" name="username" placeholder="Enter your username" required>
    
	<input type="password" name="password" placeholder="Enter your password" required>
    
	<input type="submit" value="Submit">

</form>

Comprobamos que el usuario/contraseña coinciden con los almacenados en la BS


Las páginas protegidas por el login empezaran siempre así.

<?php

// You'd put this code at the top of any "protected" page you create


// Always start this first
session_start();


if ( isset( $_SESSION['user_id'] ) ) {
    
	// Grab user data from the database using the user_id
    
		// Let them access the "logged in only" pages
} 
else {
    
	// Redirect them to the login page
    
	header("Location: http://www.yourdomain.com/login.php");

}
?>

Para logout <?php session_destroy(); ?>

////bibliografia////

w3schools.com
https://riptutorial.com/php/example/9382/loop-through-mysqli-results 
